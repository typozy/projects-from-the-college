(defun lexer (myfile)
	(setf mylist nil)
	(with-open-file (buffer myfile :direction :input)
		(do ((mychar (read-char buffer nil 'eof) (read-char buffer nil 'eof)))
			((eql mychar 'eof) 'done)
			(setf mylist (append mylist (list mychar)))
		)
	)
	(setf lexlist nil)
	(parser)
	lexlist
)

(defun parser ()
	(setf templist nil)
	(cond
		((null mylist)
			;does nothing
		)
		((char= #\( (car mylist))
			(setf lexlist (append lexlist (list (list "operator" "("))))
			(setf mylist (cdr mylist))
			(parser)
		)
		((char= #\) (car mylist))
			(setf lexlist (append lexlist (list (list "operator" ")"))))
			(setf mylist (cdr mylist))
			(parser)
		)
		((char= #\+ (car mylist))
			(setf lexlist (append lexlist (list (list "operator" "+"))))
			(setf mylist (cdr mylist))
			(parser)
		)
		((char= #\/ (car mylist))
			(setf lexlist (append lexlist (list (list "operator" "/"))))
			(setf mylist (cdr mylist))
			(parser)
		)
		((char= #\- (car mylist))
			(setf templist (list (car mylist)))
			(setf mylist (cdr mylist))
			(isminus)
		)
		((char= #\0 (car mylist))
			(setf templist (list (car mylist)))
			(setf mylist (cdr mylist))
			(iszero)
		)
		((char= #\* (car mylist))
			(setf templist (list (car mylist)))
			(setf mylist (cdr mylist))
			(isstar)
		)
		((and (char>= #\9 (car mylist)) (char<= #\1 (car mylist)))
			(setf templist (list (car mylist)))
			(setf mylist (cdr mylist))
			(isnum)
		)
		((or (and (char>= #\z (car mylist)) (char<= #\a (car mylist))) (and (char>= #\Z (car mylist)) (char<= #\A (car mylist))))
			(setf templist (list (car mylist)))
			(setf mylist (cdr mylist))
			(istext)
		)
		((or (char= #\Space (car mylist)) (char= #\Tab (car mylist)) (char= #\Newline (car mylist)))
			(setf mylist (cdr mylist))
			(parser)
		)
		(t
			(setf templist (list (car mylist)))
			(setf mylist (cdr mylist))
			(undefined)
		)
	)
)

(defun isminus ()
	(cond
		((null mylist)
			(setf lexlist (append lexlist (list (list "operator" "-"))))
		)
		((and (char>= #\9 (car mylist)) (char<= #\1 (car mylist)))
			(setf templist (append templist (list (car mylist))))
			(setf mylist (cdr mylist))
			(isnum)
		)
		((char= #\0 (car mylist))
			(setf templist (append templist (list (car mylist))))
			(setf mylist (cdr mylist))
			(notnumortext)
		)
		(t
			(setf lexlist (append lexlist (list (list "operator" "-"))))
			(parser)
		)
	)
)

(defun iszero ()
	(cond
		((null mylist)
			(setf lexlist (append lexlist (list (list "integer" "0"))))
		)
		((or (and (char>= #\9 (car mylist)) (char<= #\0 (car mylist))) (and (char>= #\z (car mylist)) (char<= #\a (car mylist))) (and (char>= #\Z (car mylist)) (char<= #\A (car mylist))))
			(setf templist (append templist (list (car mylist))))
			(setf mylist (cdr mylist))
			(notnumortext)
		)
		(t
			(setf lexlist (append lexlist (list (list "integer" "0"))))
			(parser)
		)
	)
)

(defun isstar ()
	(cond
		((null mylist)
			(setf lexlist (append lexlist (list (list "operator" "*"))))
		)
		((char= #\* (car mylist))
			(setf lexlist (append lexlist (list (list "operator" "**"))))
			(setf mylist (cdr mylist))
			(parser)
		)
		(t
			(setf lexlist (append lexlist (list (list "operator" "*"))))
			(parser)
		)
	)
)

(defun isnum ()
	(cond
		((null mylist)
			(setf lexlist (append lexlist (list (list "integer" (concatenate 'string templist)))))
		)
		((or (and (char>= #\z (car mylist)) (char<= #\a (car mylist))) (and (char>= #\Z (car mylist)) (char<= #\A (car mylist))))
			(setf templist (append templist (list (car mylist))))
			(setf mylist (cdr mylist))
			(notnumortext)
		)
		((and (char>= #\9 (car mylist)) (char<= #\0 (car mylist)))
			(setf templist (append templist (list (car mylist))))
			(setf mylist (cdr mylist))
			(isnum)
		)
		(t
			(setf lexlist (append lexlist (list (list "integer" (concatenate 'string templist)))))
			(parser)
		)
	)
)

(defun istext ()
	(cond
		((null mylist)
			(cond
				((or (string= (concatenate 'string templist) "true") (string= (concatenate 'string templist) "false"))
					(setf lexlist (append lexlist (list (list "boolean" (concatenate 'string templist)))))
				)
				((or (string= (concatenate 'string templist) "and") (string= (concatenate 'string templist) "or")
					 (string= (concatenate 'string templist) "not") (string= (concatenate 'string templist) "equal")
					 (string= (concatenate 'string templist) "append") (string= (concatenate 'string templist) "concat")
					 (string= (concatenate 'string templist) "set") (string= (concatenate 'string templist) "deffun")
					 (string= (concatenate 'string templist) "for") (string= (concatenate 'string templist) "while")
					 (string= (concatenate 'string templist) "if") (string= (concatenate 'string templist) "exit"))
					(setf lexlist (append lexlist (list (list "keyword" (concatenate 'string templist)))))
				)
				(t
					(setf lexlist (append lexlist (list (list "identifier" (concatenate 'string templist)))))
				)
			)
		)
		((and (char>= #\9 (car mylist)) (char<= #\0 (car mylist)))
			(setf templist (append templist (list (car mylist))))
			(setf mylist (cdr mylist))
			(notnumortext)
		)
		((or (and (char>= #\z (car mylist)) (char<= #\a (car mylist))) (and (char>= #\Z (car mylist)) (char<= #\A (car mylist))))
			(setf templist (append templist (list (car mylist))))
			(setf mylist (cdr mylist))
			(istext)
		)
		(t
			(cond
				((or (string= (concatenate 'string templist) "true") (string= (concatenate 'string templist) "false"))
					(setf lexlist (append lexlist (list (list "boolean" (concatenate 'string templist)))))
					(parser)
				)
				((or (string= (concatenate 'string templist) "and") (string= (concatenate 'string templist) "or")
					 (string= (concatenate 'string templist) "not") (string= (concatenate 'string templist) "equal")
					 (string= (concatenate 'string templist) "append") (string= (concatenate 'string templist) "concat")
					 (string= (concatenate 'string templist) "set") (string= (concatenate 'string templist) "deffun")
					 (string= (concatenate 'string templist) "for") (string= (concatenate 'string templist) "while")
					 (string= (concatenate 'string templist) "if") (string= (concatenate 'string templist) "exit"))
					(setf lexlist (append lexlist (list (list "keyword" (concatenate 'string templist)))))
					(parser)
				)
				(t
					(setf lexlist (append lexlist (list (list "identifier" (concatenate 'string templist)))))
					(parser)
				)
			)
		)
	)
)

(defun notnumortext ()
	(cond
		((null mylist)
			(setf lexlist (append lexlist (list (list "undefined" (concatenate 'string templist)))))
		)
		((or (and (char>= #\9 (car mylist)) (char<= #\0 (car mylist))) (and (char>= #\z (car mylist)) (char<= #\a (car mylist))) (and (char>= #\Z (car mylist)) (char<= #\A (car mylist))))
			(setf templist (append templist (list (car mylist))))
			(setf mylist (cdr mylist))
			(notnumortext)
		)
		(t
			(setf lexlist (append lexlist (list (list "undefined" (concatenate 'string templist)))))
			(parser)
		)
	)
)

(defun undefined ()
	(cond
		((null mylist)
			(setf lexlist (append lexlist (list (list "undefined" (concatenate 'string templist)))))
		)
		((not (or (char= #\+ (car mylist)) (char= #\- (car mylist)) (char= #\/ (car mylist))
				  (char= #\Space (car mylist)) (char= #\Tab (car mylist)) (char= #\Newline (car mylist))
				  (char= #\* (car mylist)) (char= #\( (car mylist)) (char= #\) (car mylist))
				  (and (char>= #\9 (car mylist)) (char<= #\0 (car mylist))) (and (char>= #\z (car mylist))
				  (char<= #\a (car mylist))) (and (char>= #\Z (car mylist)) (char<= #\A (car mylist)))))
			(setf templist (append templist (list (car mylist))))
			(setf mylist (cdr mylist))
			(undefined)
		)
		(t
			(setf lexlist (append lexlist (list (list "undefined" (concatenate 'string templist)))))
			(parser)
		)
	)
)